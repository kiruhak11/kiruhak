#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ @gs_company_bot
"""

import requests
import json
import asyncio
import schedule
import time
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "6122558496:AAEXwnP3E4uIk5sSSNzD-13vQK6A4ybCBFI")
API_URL = os.getenv("API_URL", "http://app:3015/api/auth/create-account")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@your_channel")  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "123456789")  # ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
bot_app = None

async def create_user_account(telegram_id, first_name, last_name, username):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
    data = {
        "telegramId": str(telegram_id),
        "firstName": first_name,
        "lastName": last_name or "",
        "username": username or ""
    }
    
    try:
        response = requests.post(API_URL, json=data, timeout=10)
        result = response.json()
        
        if result["success"]:
            user = result["user"]
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞
            quick_token = f"{user['login']}:{user['password']}"
            
            return f"""
‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:
üîë –õ–æ–≥–∏–Ω: `{user['login']}`
üîê –ü–∞—Ä–æ–ª—å: `{user['password']}`
üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance'] / 100} ‚ÇΩ

üöÄ –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥:
`{quick_token}`

üåê –í–æ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ: https://kiruhak11.ru/login

üìä –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–∞–π—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
            """
        else:
            if "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in result["error"]:
                return f"""
‚ÑπÔ∏è –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!

üîë –í–∞—à –ª–æ–≥–∏–Ω: `{result['login']}`
üåê –í–æ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ: http://localhost:3000/login

–ï—Å–ª–∏ –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                """
            else:
                return f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
                
    except requests.exceptions.Timeout:
        return "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
    except requests.exceptions.ConnectionError:
        return "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
    except requests.exceptions.RequestException as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"
    except Exception as e:
        return f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

async def get_channel_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat_info = await bot_app.bot.get_chat(CHANNEL_ID)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        member_count = await bot_app.bot.get_chat_member_count(CHANNEL_ID)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        messages = await bot_app.bot.get_chat_history(CHANNEL_ID, limit=10)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        recent_activity = len(messages) if messages else 0
        
        return {
            "channel_name": chat_info.title,
            "subscribers": member_count,
            "recent_activity": recent_activity,
            "description": chat_info.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        return None

async def get_website_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∞–π—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∞–π—Ç–æ–≤
        response = requests.get("http://app:3015/api/sites", timeout=10)
        if response.status_code == 200:
            sites_data = response.json()
            
            total_sites = len(sites_data) if isinstance(sites_data, list) else 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–µ—â–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å API)
            total_visits = 0
            try:
                visits_response = requests.get("http://app:3015/api/analytics/overview", timeout=10)
                if visits_response.status_code == 200:
                    visits_data = visits_response.json()
                    total_visits = visits_data.get("totalVisits", 0)
            except:
                pass
            
            return {
                "total_sites": total_sites,
                "total_visits": total_visits,
                "active_users": total_sites * 2  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∞–π—Ç–∞: {e}")
        return None

def calculate_growth(current, previous):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–æ—Å—Ç–∞"""
    if previous == 0:
        return 100 if current > 0 else 0
    return round(((current - previous) / previous) * 100, 1)

def generate_recommendations(channel_stats, website_stats, prev_stats):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    recommendations = []
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞
    if channel_stats and prev_stats.get("channel"):
        prev_subs = prev_stats["channel"].get("subscribers", 0)
        current_subs = channel_stats.get("subscribers", 0)
        growth = calculate_growth(current_subs, prev_subs)
        
        if growth < 5:
            recommendations.append("üìà –†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –º–µ–¥–ª–µ–Ω–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            recommendations.append("‚Ä¢ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è")
            recommendations.append("‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ —Ö–µ—à—Ç–µ–≥–æ–≤")
            recommendations.append("‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã")
        elif growth > 20:
            recommendations.append("üöÄ –û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ:")
            recommendations.append("‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            recommendations.append("‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã")
            recommendations.append("‚Ä¢ –£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —á–∞—Å—Ç–æ—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞
    if website_stats and prev_stats.get("website"):
        prev_sites = prev_stats["website"].get("total_sites", 0)
        current_sites = website_stats.get("total_sites", 0)
        growth = calculate_growth(current_sites, prev_sites)
        
        if growth < 10:
            recommendations.append("üåê –†–æ—Å—Ç —Å–∞–π—Ç–æ–≤ –º–µ–¥–ª–µ–Ω–Ω—ã–π. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            recommendations.append("‚Ä¢ –£–ª—É—á—à–∏—Ç—å onboarding –ø—Ä–æ—Ü–µ—Å—Å")
            recommendations.append("‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
            recommendations.append("‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        elif growth > 30:
            recommendations.append("üéØ –û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç —Å–∞–π—Ç–æ–≤! –î–µ–π—Å—Ç–≤–∏—è:")
            recommendations.append("‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É")
            recommendations.append("‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
            recommendations.append("‚Ä¢ –£–ª—É—á—à–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if not recommendations:
        recommendations.append("üìä –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        recommendations.append("‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ")
        recommendations.append("‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        recommendations.append("‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç")
    
    return recommendations

async def send_daily_stats():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not bot_app:
        print("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        channel_stats = await get_channel_stats()
        website_stats = await get_website_stats()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        prev_stats = load_previous_stats()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = "üìä **–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\n"
        report += f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞
        if channel_stats:
            report += "üì¢ **–ö–ê–ù–ê–õ:**\n"
            report += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {channel_stats['subscribers']:,}\n"
            
            if prev_stats.get("channel"):
                prev_subs = prev_stats["channel"].get("subscribers", 0)
                growth = calculate_growth(channel_stats['subscribers'], prev_subs)
                report += f"üìà –†–æ—Å—Ç: {growth:+.1f}%\n"
            
            report += f"üìù –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {channel_stats['recent_activity']} –ø–æ—Å—Ç–æ–≤\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞
        if website_stats:
            report += "üåê **–°–ê–ô–¢:**\n"
            report += f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–æ —Å–∞–π—Ç–æ–≤: {website_stats['total_sites']:,}\n"
            report += f"üëÄ –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: {website_stats['total_visits']:,}\n"
            report += f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {website_stats['active_users']:,}\n"
            
            if prev_stats.get("website"):
                prev_sites = prev_stats["website"].get("total_sites", 0)
                growth = calculate_growth(website_stats['total_sites'], prev_sites)
                report += f"üìà –†–æ—Å—Ç —Å–∞–π—Ç–æ–≤: {growth:+.1f}%\n"
            
            report += "\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = generate_recommendations(channel_stats, website_stats, prev_stats)
        if recommendations:
            report += "üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n"
            for rec in recommendations:
                report += f"{rec}\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        save_current_stats(channel_stats, website_stats)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
        await bot_app.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=report,
            parse_mode='Markdown'
        )
        
        print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {datetime.now()}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def load_previous_stats():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        with open("previous_stats.json", "r") as f:
            return json.load(f)
    except:
        return {}

def save_current_stats(channel_stats, website_stats):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        stats = {
            "date": datetime.now().isoformat(),
            "channel": channel_stats,
            "website": website_stats
        }
        with open("previous_stats.json", "w") as f:
            json.dump(stats, f, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    welcome_message = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–∞–π—Ç–æ–≤!

üìã –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚Ä¢ üéÅ 150 —Ä—É–±–ª–µ–π –Ω–∞ –±–∞–ª–∞–Ω—Å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏–π –≤–∞—à–∏—Ö —Å–∞–π—Ç–æ–≤  
‚Ä¢ üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ üí≥ –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤ (100‚ÇΩ –∑–∞ —Å–∞–π—Ç)

–°–æ–∑–¥–∞—é –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç...
    """
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(welcome_message)
    
    # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    account_message = await create_user_account(
        telegram_id=user.id,
        first_name=user.first_name,
        last_name=user.last_name,
        username=user.username
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    await update.message.reply_text(account_message, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É

üîπ /start - –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
üîπ /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)

üåê –°–∞–π—Ç: http://localhost:3000
üìß –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @kiruhak11

–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:
‚Ä¢ –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–∞–π—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
    """
    
    await update.message.reply_text(help_text)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user = update.effective_user
    
    if str(user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await send_daily_stats()
    await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message_text = update.message.text
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, —Å–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    if not message_text.startswith('/'):
        await start_command(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    error = context.error
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã getUpdates
    if "Conflict: terminated by other getUpdates request" in str(error):
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç getUpdates - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–∞–π–º–∞—É—Ç—ã
    if "Timed out" in str(error):
        print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
        return
    
    print(f"‚ùå –û—à–∏–±–∫–∞: {error}")
    
    if update and update.effective_message:
        try:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except:
            pass

def schedule_daily_stats():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    schedule.every().day.at("09:00").do(lambda: asyncio.create_task(send_daily_stats()))
    
    while True:
        schedule.run_pending()
        time.sleep(60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global bot_app
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        bot_app = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        bot_app.add_handler(CommandHandler("start", start_command))
        bot_app.add_handler(CommandHandler("help", help_command))
        bot_app.add_handler(CommandHandler("stats", stats_command))
        bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        bot_app.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        stats_thread = threading.Thread(target=schedule_daily_stats, daemon=True)
        stats_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ 09:00")
        bot_app.run_polling(
            poll_interval=1,
            drop_pending_updates=True
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
        print("2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("3. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API")
        print("4. –ù–µ—Ç –ª–∏ –¥—Ä—É–≥–∏—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞")

if __name__ == "__main__":
    main()
