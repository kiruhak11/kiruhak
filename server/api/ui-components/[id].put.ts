import { prisma } from "../../utils/prisma";

export default defineEventHandler(async (event) => {
  console.log("üîí API: PUT /api/ui-components/[id] - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ API endpoint
  const headers = getHeaders(event);
  console.log("üîí API: –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:", Object.keys(headers));
  console.log(
    "üîí API: Authorization header (lowercase):",
    headers.authorization
  );
  console.log(
    "üîí API: Authorization header (uppercase):",
    headers.Authorization
  );

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const user = event.context.user;
    console.log(
      "üîí API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:",
      user ? "present" : "missing"
    );

    if (!user || !user.isAdmin) {
      console.log("üîí API: –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
      throw createError({
        statusCode: 403,
        statusMessage: "Admin access required",
      });
    }

    console.log(
      "üîí API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:",
      user.firstName,
      "isAdmin:",
      user.isAdmin
    );

    const id = getRouterParam(event, "id");
    const body = await readBody(event);
    const {
      name,
      description,
      category,
      code,
      html,
      css,
      js,
      preview,
      tags = [],
      order = 0,
      isActive = true,
    } = body;

    if (!id) {
      return {
        success: false,
        error: "ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω",
      };
    }

    if (!name || !category || !code) {
      return {
        success: false,
        error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∫–æ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞",
      };
    }

    const component = await prisma.uiComponent.update({
      where: { id },
      data: {
        name,
        description,
        category,
        code: code || "", // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        html: html || "",
        css: css || "",
        js: js || "",
        preview,
        tags: Array.isArray(tags) ? tags : [],
        order: parseInt(order) || 0,
        isActive,
        updatedAt: new Date(),
      },
    });

    console.log("üîí API: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
    return {
      success: true,
      component,
    };
  } catch (error) {
    console.error("üîí API: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:", error);
    return {
      success: false,
      error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞",
    };
  }
});
