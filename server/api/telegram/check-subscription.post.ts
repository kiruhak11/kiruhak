import { prisma } from "../../utils/prisma";

export default defineEventHandler(async (event) => {
  try {
    const body = await readBody(event);
    const { userId, telegramId } = body;

    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:", { userId, telegramId });

    if (!userId && !telegramId) {
      console.log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç userId –∏–ª–∏ telegramId");
      return {
        success: false,
        error: "–ù–µ–æ–±—Ö–æ–¥–∏–º userId –∏–ª–∏ telegramId",
      };
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    const config = useRuntimeConfig();
    const botToken = config.telegramToken;
    const channelUsername = config.channelUsername;

    if (!botToken) {
      console.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ");
      return {
        success: false,
        error: "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞",
      };
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    let user;
    if (userId) {
      user = await prisma.user.findUnique({
        where: { id: userId },
      });
    } else if (telegramId) {
      user = await prisma.user.findUnique({
        where: { telegramId: telegramId },
      });
    }

    console.log(
      "üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:",
      user
        ? {
            id: user.id,
            telegramId: user.telegramId,
            username: user.username,
            firstName: user.firstName,
            lastName: user.lastName,
          }
        : "–ù–ï –ù–ê–ô–î–ï–ù"
    );

    if (!user) {
      return {
        success: false,
        error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Telegram Bot API
    try {
      const telegramApiUrl = `https://api.telegram.org/bot${botToken}/getChatMember`;
      const requestBody = {
        chat_id: `@${channelUsername}`,
        user_id: user.telegramId,
      };

      console.log("üì° –ó–∞–ø—Ä–æ—Å –∫ Telegram API:", {
        url: telegramApiUrl,
        chat_id: `@${channelUsername}`,
        user_id: user.telegramId,
      });

      const response = await fetch(telegramApiUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      });

      const data = await response.json();
      console.log("üì° –û—Ç–≤–µ—Ç Telegram API:", data);

      if (!data.ok) {
        console.error("‚ùå –û—à–∏–±–∫–∞ Telegram API:", data);
        return {
          success: false,
          error: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
          telegramError: data.description,
        };
      }

      const member = data.result;
      const isSubscribed = ["member", "administrator", "creator"].includes(
        member.status
      );

      console.log("üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:", {
        status: member.status,
        isSubscribed,
        user: member.user,
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await prisma.user.update({
        where: { id: user.id },
        data: {
          isSubscribed: isSubscribed,
          subscriptionCheckedAt: new Date(),
        },
      });

      console.log("üíæ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î");

      return {
        success: true,
        isSubscribed,
        memberStatus: member.status,
        user: {
          id: user.id,
          telegramId: user.telegramId,
          username: user.username,
          firstName: user.firstName,
          lastName: user.lastName,
        },
      };
    } catch (telegramError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:", telegramError);
      return {
        success: false,
        error: "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram",
        telegramError: telegramError.message,
      };
    }
  } catch (error) {
    console.error("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
    return {
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    };
  }
});
