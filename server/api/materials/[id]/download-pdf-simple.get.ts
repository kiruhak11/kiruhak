import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export default defineEventHandler(async (event) => {
  try {
    console.log("üîê PDF Simple: –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF");

    const materialId = getRouterParam(event, "id");
    console.log("üîê PDF Simple: materialId", materialId);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è middleware)
    const user = event.context.user;
    console.log("üîê PDF Simple: user", user ? "present" : "missing");

    if (!user) {
      throw createError({
        statusCode: 401,
        statusMessage: "Unauthorized",
      });
    }

    const userId = user.id;
    console.log("üîê PDF Simple: userId", userId);

    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log("üîê PDF Simple: –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –ë–î");
    const material = await prisma.material.findUnique({
      where: {
        id: materialId,
        isActive: true,
      },
    });

    console.log("üîê PDF Simple: material", material ? "found" : "not found");

    if (!material) {
      throw createError({
        statusCode: 404,
        statusMessage: "Material not found",
      });
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log("üîê PDF Simple: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –ë–î");
    await prisma.materialDownload.create({
      data: {
        materialId,
        userId,
      },
    });
    console.log("üîê PDF Simple: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î");

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ PDF
    const content = `
${material.title}
${"=".repeat(material.title.length)}

–¢–∏–ø: ${getTypeText(material.type)}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${material.category}
–°—Ç—Ä–∞–Ω–∏—Ü: ${material.pages}
–û–ø–∏—Å–∞–Ω–∏–µ: ${material.description}

${material.content}

---
–°–∫–∞—á–∞–Ω–æ —Å K-Studio
–î–∞—Ç–∞: ${new Date().toLocaleDateString("ru-RU")}
    `.trim();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    setHeader(event, "Content-Type", "text/plain; charset=utf-8");

    // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const safeFileName = material.title
      .replace(/[^a-zA-Z0-9\s]/g, "")
      .replace(/\s+/g, "_")
      .toLowerCase();

    setHeader(
      event,
      "Content-Disposition",
      `attachment; filename="${safeFileName}.txt"`
    );

    return content;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:", error);
    throw createError({
      statusCode: 500,
      statusMessage: "Error generating file",
    });
  }
});

function getTypeText(type) {
  const texts = {
    checklist: "–ß–µ–∫-–ª–∏—Å—Ç",
    template: "–®–∞–±–ª–æ–Ω",
    architecture: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
    guide: "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
  };
  return texts[type] || type;
}
