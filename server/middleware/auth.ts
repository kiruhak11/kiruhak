import { prisma } from "../utils/prisma";

export default defineEventHandler(async (event) => {
  const path = getRequestURL(event).pathname;
  const method = getMethod(event);

  console.log(`üîí [Auth Middleware] === –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò ===`);
  console.log(`üîí [Auth Middleware] ${method} ${path}`);

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  const publicRoutes = [
    "/api/auth/telegram",
    "/api/auth/login",
    "/api/auth/create-account",
    "/api/projects", // GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    "/api/analytics/track",
    "/api/test-auth",
    "/api/health",
  ];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ä—à—Ä—É—Ç –ø—É–±–ª–∏—á–Ω—ã–º
  const isPublicRoute = publicRoutes.includes(path);

  // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º GET –∑–∞–ø—Ä–æ—Å—ã –∫ –ø—Ä–æ–µ–∫—Ç–∞–º (–ø—É–±–ª–∏—á–Ω—ã–µ)
  const isPublicProjectRoute = path === "/api/projects" && method === "GET";

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏–µ–π —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏, —Ç—Ä–µ–±—É—é—â–µ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const isProjectOperation =
    path.startsWith("/api/projects/") && method !== "GET";
  const isProjectCreate = path === "/api/projects" && method === "POST";

  const shouldSkipAuth =
    (isPublicRoute && !isProjectCreate) || isPublicProjectRoute;

  console.log(`üîí [Auth Middleware] ${method} ${path}`);
  console.log(
    `üîí [Auth Middleware] Path starts with /api/:`,
    path.startsWith("/api/")
  );
  console.log(`üîí [Auth Middleware] Public routes:`, publicRoutes);
  console.log(`üîí [Auth Middleware] Is public route:`, isPublicRoute);
  console.log(
    `üîí [Auth Middleware] Is public project route:`,
    isPublicProjectRoute
  );
  console.log(`üîí [Auth Middleware] Is project operation:`, isProjectOperation);
  console.log(`üîí [Auth Middleware] Is project create:`, isProjectCreate);
  console.log(`üîí [Auth Middleware] Should skip auth:`, shouldSkipAuth);

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (shouldSkipAuth) {
    console.log(`üîí [Auth Middleware] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: ${path}`);
    return;
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º GET –∑–∞–ø—Ä–æ—Å—ã –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º –∏ —Ä–µ—Å—É—Ä—Å–∞–º
  if (
    path.startsWith("/_nuxt/") ||
    path.startsWith("/favicon.ico") ||
    path.startsWith("/assets/") ||
    path.startsWith("/images/") ||
    path.includes(".js") ||
    path.includes(".css") ||
    path.includes(".png") ||
    path.includes(".jpg") ||
    path.includes(".svg")
  ) {
    return;
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥—Ä—É–≥–∏–µ –ø—É–±–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (
    path === "/" ||
    path === "/login" ||
    path === "/auth-callback" ||
    path === "/test-auth" ||
    path.startsWith("/projects") ||
    path.startsWith("/contact")
  ) {
    return;
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –∫ API –º–∞—Ä—à—Ä—É—Ç–∞–º
  if (!path.startsWith("/api/")) {
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
  const authHeader = getHeader(event, "authorization");
  console.log("üîí Server Middleware: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è", path);
  console.log(
    "üîí Server Middleware: Authorization header:",
    authHeader ? "present" : "missing"
  );

  // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const allHeaders = getHeaders(event);
  console.log("üîí Server Middleware: –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:", Object.keys(allHeaders));
  console.log("üîí Server Middleware: Authorization header value:", authHeader);

  // –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —Ç—Ä–µ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  if (isProjectOperation || isProjectCreate) {
    console.log(
      "üîí Server Middleware: –û–ø–µ—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    );
  }

  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    console.log("üîí Server Middleware: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç");
    throw createError({
      statusCode: 401,
      statusMessage: "Unauthorized",
    });
  }

  const token = authHeader.substring(7);
  console.log(
    "üîí Server Middleware: –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:",
    token.substring(0, 20) + "..."
  );
  console.log("üîí Server Middleware: –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:", token.length);

  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è JWT)
    console.log("üîí Server Middleware: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if (!token || token.trim() === "") {
      console.log("üîí Server Middleware: –¢–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π");
      throw new Error("Empty token");
    }

    const decoded = JSON.parse(Buffer.from(token, "base64").toString());
    console.log("üîí Server Middleware: –¢–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:", {
      userId: decoded.userId,
      exp: decoded.exp,
    });
    console.log("üîí Server Middleware: –ü–æ–ª–Ω—ã–π –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", decoded);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–∫–µ–Ω–∞
    if (!decoded.userId || !decoded.exp) {
      console.log("üîí Server Middleware: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ–∫–µ–Ω–∞:", decoded);
      throw new Error("Invalid token structure");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
    const currentTime = Math.floor(Date.now() / 1000);
    console.log(
      "üîí Server Middleware: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:",
      currentTime,
      "–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è:",
      decoded.exp
    );

    if (decoded.exp < currentTime) {
      console.log("üîí Server Middleware: –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫");
      throw createError({
        statusCode: 401,
        statusMessage: "Token expired",
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log(
      "üîí Server Middleware: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID:",
      decoded.userId
    );
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
    });

    if (!user) {
      console.log("üîí Server Middleware: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      throw createError({
        statusCode: 401,
        statusMessage: "User not found",
      });
    }

    console.log("üîí Server Middleware: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:", user.firstName);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    event.context.user = user;

    console.log(
      "üîí Server Middleware: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
      user.firstName
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤
    if (path.startsWith("/api/admin") && !user.isAdmin) {
      throw createError({
        statusCode: 403,
        statusMessage: "Admin access required",
      });
    }

    console.log("üîí Server Middleware: === –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò ===");
  } catch (error) {
    console.error("üîí Server Middleware: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
    if (error instanceof Error) {
      console.error(
        "üîí Server Middleware: –¢–∏–ø –æ—à–∏–±–∫–∏:",
        error.constructor.name
      );
      console.error("üîí Server Middleware: –°–æ–æ–±—â–µ–Ω–∏–µ:", error.message);
    }
    throw createError({
      statusCode: 401,
      statusMessage: "Invalid token",
    });
  }
});
