import { ref, readonly } from "vue";

interface User {
  id: string;
  telegramId: string;
  username?: string;
  firstName: string;
  lastName?: string;
  photoUrl?: string;
  isAdmin: boolean;
  balance: number;
  sitesCount: number;
  transactionsCount: number;
  createdAt: string;
}

export const useAuth = () => {
  const user = ref<User | null>(null);
  const token = ref<string | null>(null);
  const loading = ref(false);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ localStorage –∏ cookies
  const initAuth = async () => {
    if (process.client) {
      const savedToken = localStorage.getItem("auth_token");
      const savedUser = localStorage.getItem("auth_user");

      console.log("üîê useAuth: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", {
        hasSavedToken: !!savedToken,
        hasSavedUser: !!savedUser,
        tokenLength: savedToken ? savedToken.length : 0,
      });

      if (savedToken && savedUser) {
        token.value = savedToken;
        user.value = JSON.parse(savedUser);

        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cookies –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        document.cookie = `auth_token=${savedToken}; path=/; max-age=86400; SameSite=Strict`;

        console.log("üîê useAuth: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", {
          user: user.value,
          token: token.value ? "***" : null,
          tokenLength: token.value ? token.value.length : 0,
          tokenPreview: token.value
            ? token.value.substring(0, 20) + "..."
            : null,
        });

        // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        console.log(
          "üîê useAuth: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ localStorage"
        );
      } else {
        console.log("üîê useAuth: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏");
      }
    }
  };

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é
  const loginWithCredentials = async (login: string, password: string) => {
    console.log("üîê useAuth: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:", {
      login,
      password: "***",
    });
    loading.value = true;

    try {
      console.log("üîê useAuth: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...");
      const response = await $fetch("/api/auth/login", {
        method: "POST",
        body: { login, password },
      });

      console.log("üîê useAuth: –û—Ç–≤–µ—Ç –æ—Ç API:", response);

      if (response.success) {
        user.value = response.user;
        token.value = response.token;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∏ cookies
        if (process.client) {
          localStorage.setItem("auth_token", response.token);
          localStorage.setItem("auth_user", JSON.stringify(response.user));

          // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cookies –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
          document.cookie = `auth_token=${response.token}; path=/; max-age=86400; SameSite=Strict`;

          console.log("üîê useAuth: –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage –∏ cookies:", {
            tokenLength: response.token.length,
            tokenPreview: response.token.substring(0, 20) + "...",
          });
        }

        console.log("üîê useAuth: –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω");
        return { success: true };
      } else {
        console.log("üîê useAuth: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", response.error);
        return { success: false, error: response.error };
      }
    } catch (error) {
      console.error("üîê useAuth: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
      return { success: false, error: "Login failed" };
    } finally {
      loading.value = false;
    }
  };

  // –í—ã—Ö–æ–¥
  const logout = () => {
    user.value = null;
    token.value = null;

    if (process.client) {
      localStorage.removeItem("auth_token");
      localStorage.removeItem("auth_user");

      // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ cookies
      document.cookie =
        "auth_token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT";
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const refreshUser = async () => {
    if (!token.value) {
      console.log("üîê useAuth: refreshUser - –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞");
      return;
    }

    try {
      console.log("üîê useAuth: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞");
      const response = await $fetch("/api/user/me", {
        headers: {
          Authorization: `Bearer ${token.value}`,
        },
      });

      if (response.success) {
        user.value = response.user;

        if (process.client) {
          localStorage.setItem("auth_user", JSON.stringify(response.user));
        }

        console.log("üîê useAuth: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
      } else {
        console.log("üîê useAuth: –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞, –≤—ã—Ö–æ–¥–∏–º");
        logout();
      }
    } catch (error) {
      console.error("üîê useAuth: Refresh user error:", error);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (error.status === 401) {
        console.log("üîê useAuth: –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤—ã—Ö–æ–¥–∏–º");
      }

      logout();
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const isAuthenticated = computed(() => !!user.value);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const isAdmin = computed(() => user.value?.isAdmin || false);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  const formattedBalance = computed(() => {
    if (!user.value) return "0 ‚ÇΩ";
    return `${(user.value.balance / 100).toFixed(0)} ‚ÇΩ`;
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  const checkTokenStatus = () => {
    if (process.client) {
      const savedToken = localStorage.getItem("auth_token");
      const savedUser = localStorage.getItem("auth_user");

      console.log("üîê useAuth: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–∫–µ–Ω–∞", {
        hasToken: !!savedToken,
        hasUser: !!savedUser,
        tokenLength: savedToken ? savedToken.length : 0,
        currentToken: token.value ? "present" : "missing",
        currentUser: user.value ? "present" : "missing",
      });

      return {
        hasToken: !!savedToken,
        hasUser: !!savedUser,
        tokenLength: savedToken ? savedToken.length : 0,
      };
    }
    return null;
  };

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  const forceRefreshToken = async () => {
    console.log("üîê useAuth: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞");

    if (process.client) {
      const savedToken = localStorage.getItem("auth_token");
      const savedUser = localStorage.getItem("auth_user");

      if (savedToken && savedUser) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        token.value = savedToken;
        user.value = JSON.parse(savedUser);

        // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        try {
          await refreshUser();
          console.log("üîê useAuth: –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
          return true;
        } catch (error) {
          console.error("üîê useAuth: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
          logout();
          return false;
        }
      } else {
        console.log("üîê useAuth: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
        return false;
      }
    }
    return false;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  const validateToken = () => {
    if (process.client && token.value) {
      try {
        const decoded = JSON.parse(
          Buffer.from(token.value, "base64").toString()
        );
        const currentTime = Math.floor(Date.now() / 1000);

        console.log("üîê useAuth: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞:", {
          userId: decoded.userId,
          exp: decoded.exp,
          currentTime,
          isValid: decoded.exp > currentTime,
          timeLeft: decoded.exp - currentTime,
        });

        return {
          isValid: decoded.exp > currentTime,
          timeLeft: decoded.exp - currentTime,
          userId: decoded.userId,
        };
      } catch (error) {
        console.error("üîê useAuth: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
        return { isValid: false, error: error.message };
      }
    }
    return { isValid: false, error: "No token" };
  };

  return {
    user: readonly(user),
    token: readonly(token),
    loading: readonly(loading),
    isAuthenticated,
    isAdmin,
    formattedBalance,
    initAuth,
    loginWithCredentials,
    logout,
    refreshUser,
    checkTokenStatus,
    forceRefreshToken,
    validateToken,
  };
};
